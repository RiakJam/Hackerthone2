🏗️ Tech Stack
    • Frontend:
        ◦ HTML5 → Structure (textarea for notes, flashcard UI).
        ◦ CSS → Animations & styling (flip cards, transitions).
        ◦ JavaScript → Flip-card interactivity, fetch API to talk to Flask, DOM updates.
    • Backend:
        ◦ Python Flask → Handles routes, API calls, user auth.
        ◦ Hugging Face API → Generates quiz questions / summaries.
        ◦ MySQL → Stores users, flashcards, quiz history.

🔑 Features (Students + Teachers)
👩‍🎓 For Students:
    • Paste notes → get instant flashcards.
    • Play interactive flashcards (flip cards, score self).
    • Save decks for later review.
    • Track progress over time.
👨‍🏫 For Teachers:
    • Upload/paste class material → generate flashcards for students.
    • Share decks with a class (class code/invite).
    • Track student performance on quizzes.

⚙️ How It Works (Step by Step)
    1. Input:
        ◦ User pastes notes into <textarea> (HTML → Flask).
    2. Backend Processing (Flask + Hugging Face):
        ◦ Flask receives text.
        ◦ Sends it to Hugging Face Q&A / Text Generation model.
        ◦ Example model: deepset/roberta-base-squad2 or a summarization model.
        ◦ Gets back 5 quiz questions + answers.
    3. Flashcard Creation (JS + CSS animations):
        ◦ Flask sends results (JSON → frontend).
        ◦ JavaScript dynamically builds interactive flashcards with flip animation.
        ◦ Example: Front side = Question, Back side = Answer.
    4. Save to MySQL (Flask ORM / SQLAlchemy):
        ◦ User clicks “Save Deck”.
        ◦ Flask inserts flashcards into database.
        ◦ Each deck tied to user_id (student or teacher).
    5. Reuse / Replay:
        ◦ Next time, students/teachers can load saved flashcards.
        ◦ Teachers can share a deck with multiple students.

🗄️ Database Structure (MySQL)
Example schema:
users
    • id (PK)
    • name
    • email
    • role (student / teacher)
    • password (hashed)
flashcards
    • id (PK)
    • user_id (FK → users)
    • question
    • answer
    • created_at
decks
    • id (PK)
    • user_id (FK → users)
    • title
    • created_at
deck_flashcards (join table)
    • deck_id (FK → decks)
    • flashcard_id (FK → flashcards)

🔥 MVP Roadmap
Phase 1 (Core MVP)
✅ Paste notes → Hugging Face API → Generate flashcards → Show interactive flip cards → Save to MySQL.
Phase 2 (User Accounts)
✅ Add login/signup (Flask-Login).
✅ Allow students & teachers to have their own decks.
Phase 3 (Teacher Features)
✅ Teachers share decks with students.
✅ Class leaderboard (based on quiz practice).
Phase 4 (Gamification + AI Extras)
✅ Spaced repetition reminders.
✅ Leaderboards & badges.
✅ More advanced AI models for better questions.


Database 
CREATE DATABASE hackerthone_db;

USE hackerthone_db;

CREATE TABLE flashcards (
    id INT AUTO_INCREMENT PRIMARY KEY,
    role ENUM('student','teacher') NOT NULL,
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
